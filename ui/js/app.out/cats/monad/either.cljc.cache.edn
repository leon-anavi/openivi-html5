;; Analyzed by ClojureScript 1.7.166
{:use-macros nil, :excludes #{}, :name cats.monad.either, :imports nil, :requires {p cats.protocols, cats.protocols cats.protocols, ctx cats.context, cats.context cats.context}, :uses nil, :defs {->Left {:protocol-inline nil, :meta {:file "/Users/txus/.boot/cache/tmp/Users/txus/Code/Ats/sota_hmi/ui/l3c/-jstf34/js/app.out/cats/monad/either.cljc", :line 78, :column 10, :end-line 78, :end-column 14, :protocols #{cljs.core/IEquiv cats.protocols/Extract cljs.core/IDeref cats.protocols/Contextual}, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IDeref}, :factory :positional, :arglists (quote ([v]))}, :protocols #{cljs.core/IEquiv cats.protocols/Extract cljs.core/IDeref cats.protocols/Contextual}, :name cats.monad.either/->Left, :variadic false, :file "/Users/txus/.boot/cache/tmp/Users/txus/Code/Ats/sota_hmi/ui/l3c/-jstf34/js/app.out/cats/monad/either.cljc", :end-column 14, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 78, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IDeref}}, branch {:protocol-inline nil, :meta {:file "/Users/txus/.boot/cache/tmp/Users/txus/Code/Ats/sota_hmi/ui/l3c/-jstf34/js/app.out/cats/monad/either.cljc", :line 226, :column 7, :end-line 226, :end-column 13, :arglists (quote ([e lf rf])), :doc "Given an either value and two functions, if the either is a\n  left apply the first function to the value it contains; if the\n  either is a right apply the second function to its value."}, :name cats.monad.either/branch, :variadic false, :file "/Users/txus/.boot/cache/tmp/Users/txus/Code/Ats/sota_hmi/ui/l3c/-jstf34/js/app.out/cats/monad/either.cljc", :end-column 13, :method-params ([e lf rf]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 226, :end-line 226, :max-fixed-arity 3, :fn-var true, :arglists (quote ([e lf rf])), :doc "Given an either value and two functions, if the either is a\n  left apply the first function to the value it contains; if the\n  either is a right apply the second function to its value."}, Left {:num-fields 1, :protocols #{cljs.core/IEquiv cats.protocols/Extract cljs.core/IDeref cats.protocols/Contextual}, :name cats.monad.either/Left, :file "/Users/txus/.boot/cache/tmp/Users/txus/Code/Ats/sota_hmi/ui/l3c/-jstf34/js/app.out/cats/monad/either.cljc", :end-column 14, :type true, :column 10, :line 78, :record false, :end-line 78, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IDeref}}, t_cats$monad$either6301 {:num-fields 1, :protocols #{cats.protocols/Monad cats.protocols/Functor cljs.core/IMeta cats.protocols/Foldable cats.protocols/Traversable cats.protocols/Context cljs.core/IWithMeta cats.protocols/Applicative}, :name cats.monad.either/t_cats$monad$either6301, :file "/Users/txus/.boot/cache/tmp/Users/txus/Code/Ats/sota_hmi/ui/l3c/-jstf34/js/app.out/cats/monad/either.cljc", :type true, :anonymous true, :column 3, :line 146, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, first-left {:name cats.monad.either/first-left, :file "/Users/txus/.boot/cache/tmp/Users/txus/Code/Ats/sota_hmi/ui/l3c/-jstf34/js/app.out/cats/monad/either.cljc", :line 262, :column 1, :end-line 262, :end-column 16, :meta {:file "/Users/txus/.boot/cache/tmp/Users/txus/Code/Ats/sota_hmi/ui/l3c/-jstf34/js/app.out/cats/monad/either.cljc", :line 262, :column 6, :end-line 262, :end-column 16}, :doc "Given a collection of either, return the first value that is left"}, invert {:protocol-inline nil, :meta {:file "/Users/txus/.boot/cache/tmp/Users/txus/Code/Ats/sota_hmi/ui/l3c/-jstf34/js/app.out/cats/monad/either.cljc", :line 270, :column 7, :end-line 270, :end-column 13, :arglists (quote ([e])), :doc "Convert a left to a right or viceversa, preserving content."}, :name cats.monad.either/invert, :variadic false, :file "/Users/txus/.boot/cache/tmp/Users/txus/Code/Ats/sota_hmi/ui/l3c/-jstf34/js/app.out/cats/monad/either.cljc", :end-column 13, :method-params ([e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 270, :end-line 270, :max-fixed-arity 1, :fn-var true, :arglists (quote ([e])), :doc "Convert a left to a right or viceversa, preserving content."}, left {:protocol-inline nil, :meta {:file "/Users/txus/.boot/cache/tmp/Users/txus/Code/Ats/sota_hmi/ui/l3c/-jstf34/js/app.out/cats/monad/either.cljc", :line 110, :column 7, :end-line 110, :end-column 11, :arglists (quote ([] [v])), :doc "A Left type constructor.", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [v]), :arglists ([] [v]), :arglists-meta (nil nil)}}, :name cats.monad.either/left, :variadic false, :file "/Users/txus/.boot/cache/tmp/Users/txus/Code/Ats/sota_hmi/ui/l3c/-jstf34/js/app.out/cats/monad/either.cljc", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [v]), :arglists ([] [v]), :arglists-meta (nil nil)}, :method-params ([] [v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 1, :fn-var true, :arglists ([] [v]), :doc "A Left type constructor."}, ->t_cats$monad$either6301 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cats.protocols/Monad cats.protocols/Functor cljs.core/IMeta cats.protocols/Foldable cats.protocols/Traversable cats.protocols/Context cljs.core/IWithMeta cats.protocols/Applicative}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([meta6302])), :file nil}, :protocols #{cats.protocols/Monad cats.protocols/Functor cljs.core/IMeta cats.protocols/Foldable cats.protocols/Traversable cats.protocols/Context cljs.core/IWithMeta cats.protocols/Applicative}, :name cats.monad.either/->t_cats$monad$either6301, :variadic false, :file "/Users/txus/.boot/cache/tmp/Users/txus/Code/Ats/sota_hmi/ui/l3c/-jstf34/js/app.out/cats/monad/either.cljc", :method-params ([meta6302]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 146, :max-fixed-arity 1, :fn-var true, :arglists (quote ([meta6302])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_cats$monad$either6304 {:num-fields 3, :protocols #{cats.protocols/MonadTrans cats.protocols/Monad cljs.core/IMeta cats.protocols/Context cljs.core/IWithMeta}, :name cats.monad.either/t_cats$monad$either6304, :file "/Users/txus/.boot/cache/tmp/Users/txus/Code/Ats/sota_hmi/ui/l3c/-jstf34/js/app.out/cats/monad/either.cljc", :type true, :anonymous true, :column 3, :line 199, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_cats$monad$either6304 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cats.protocols/MonadTrans cats.protocols/Monad cljs.core/IMeta cats.protocols/Context cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([either-t inner-monad meta6305])), :file nil}, :protocols #{cats.protocols/MonadTrans cats.protocols/Monad cljs.core/IMeta cats.protocols/Context cljs.core/IWithMeta}, :name cats.monad.either/->t_cats$monad$either6304, :variadic false, :file "/Users/txus/.boot/cache/tmp/Users/txus/Code/Ats/sota_hmi/ui/l3c/-jstf34/js/app.out/cats/monad/either.cljc", :method-params ([either-t inner-monad meta6305]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 199, :max-fixed-arity 3, :fn-var true, :arglists (quote ([either-t inner-monad meta6305])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, either? {:protocol-inline nil, :meta {:file "/Users/txus/.boot/cache/tmp/Users/txus/Code/Ats/sota_hmi/ui/l3c/-jstf34/js/app.out/cats/monad/either.cljc", :line 132, :column 7, :end-line 132, :end-column 14, :arglists (quote ([v])), :doc "Return true in case of `v` is instance\n  of Either monad."}, :name cats.monad.either/either?, :variadic false, :file "/Users/txus/.boot/cache/tmp/Users/txus/Code/Ats/sota_hmi/ui/l3c/-jstf34/js/app.out/cats/monad/either.cljc", :end-column 14, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 132, :end-line 132, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Return true in case of `v` is instance\n  of Either monad."}, branch-right {:protocol-inline nil, :meta {:file "/Users/txus/.boot/cache/tmp/Users/txus/Code/Ats/sota_hmi/ui/l3c/-jstf34/js/app.out/cats/monad/either.cljc", :line 244, :column 7, :end-line 244, :end-column 19, :arglists (quote ([e rf])), :doc "Either-specific synonym for #'cats.core/bind\n\n  Given an either value and a function, if the either is a\n  right, apply the function to the value it contains; if the\n  either is a left, return it."}, :name cats.monad.either/branch-right, :variadic false, :file "/Users/txus/.boot/cache/tmp/Users/txus/Code/Ats/sota_hmi/ui/l3c/-jstf34/js/app.out/cats/monad/either.cljc", :end-column 19, :method-params ([e rf]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 244, :end-line 244, :max-fixed-arity 2, :fn-var true, :arglists (quote ([e rf])), :doc "Either-specific synonym for #'cats.core/bind\n\n  Given an either value and a function, if the either is a\n  right, apply the function to the value it contains; if the\n  either is a left, return it."}, ->t_cats$monad$either6307 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cats.protocols/MonadTrans cats.protocols/Monad cljs.core/IMeta cats.protocols/Context cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([either-t inner-monad meta6308])), :file nil}, :protocols #{cats.protocols/MonadTrans cats.protocols/Monad cljs.core/IMeta cats.protocols/Context cljs.core/IWithMeta}, :name cats.monad.either/->t_cats$monad$either6307, :variadic false, :file "/Users/txus/.boot/cache/tmp/Users/txus/Code/Ats/sota_hmi/ui/l3c/-jstf34/js/app.out/cats/monad/either.cljc", :method-params ([either-t inner-monad meta6308]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 199, :max-fixed-arity 3, :fn-var true, :arglists (quote ([either-t inner-monad meta6308])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->Right {:protocol-inline nil, :meta {:file "/Users/txus/.boot/cache/tmp/Users/txus/Code/Ats/sota_hmi/ui/l3c/-jstf34/js/app.out/cats/monad/either.cljc", :line 49, :column 10, :end-line 49, :end-column 15, :protocols #{cljs.core/IEquiv cats.protocols/Extract cljs.core/IDeref cats.protocols/Contextual}, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IDeref}, :factory :positional, :arglists (quote ([v]))}, :protocols #{cljs.core/IEquiv cats.protocols/Extract cljs.core/IDeref cats.protocols/Contextual}, :name cats.monad.either/->Right, :variadic false, :file "/Users/txus/.boot/cache/tmp/Users/txus/Code/Ats/sota_hmi/ui/l3c/-jstf34/js/app.out/cats/monad/either.cljc", :end-column 15, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 49, :end-line 49, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IDeref}}, first-right {:name cats.monad.either/first-right, :file "/Users/txus/.boot/cache/tmp/Users/txus/Code/Ats/sota_hmi/ui/l3c/-jstf34/js/app.out/cats/monad/either.cljc", :line 266, :column 1, :end-line 266, :end-column 17, :meta {:file "/Users/txus/.boot/cache/tmp/Users/txus/Code/Ats/sota_hmi/ui/l3c/-jstf34/js/app.out/cats/monad/either.cljc", :line 266, :column 6, :end-line 266, :end-column 17}, :doc "Given a collection of either, return the first value that is right"}, Right {:num-fields 1, :protocols #{cljs.core/IEquiv cats.protocols/Extract cljs.core/IDeref cats.protocols/Contextual}, :name cats.monad.either/Right, :file "/Users/txus/.boot/cache/tmp/Users/txus/Code/Ats/sota_hmi/ui/l3c/-jstf34/js/app.out/cats/monad/either.cljc", :end-column 15, :type true, :column 10, :line 49, :record false, :end-line 49, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IDeref}}, right? {:protocol-inline nil, :meta {:file "/Users/txus/.boot/cache/tmp/Users/txus/Code/Ats/sota_hmi/ui/l3c/-jstf34/js/app.out/cats/monad/either.cljc", :line 126, :column 7, :end-line 126, :end-column 13, :arglists (quote ([v])), :doc "Return true if `v` is an instance\n  of Right type."}, :name cats.monad.either/right?, :variadic false, :file "/Users/txus/.boot/cache/tmp/Users/txus/Code/Ats/sota_hmi/ui/l3c/-jstf34/js/app.out/cats/monad/either.cljc", :end-column 13, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 126, :end-line 126, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Return true if `v` is an instance\n  of Right type."}, either-t {:protocol-inline nil, :meta {:file "/Users/txus/.boot/cache/tmp/Users/txus/Code/Ats/sota_hmi/ui/l3c/-jstf34/js/app.out/cats/monad/either.cljc", :line 196, :column 7, :end-line 196, :end-column 15, :arglists (quote ([inner-monad])), :doc "The Either transformer constructor."}, :name cats.monad.either/either-t, :variadic false, :file "/Users/txus/.boot/cache/tmp/Users/txus/Code/Ats/sota_hmi/ui/l3c/-jstf34/js/app.out/cats/monad/either.cljc", :end-column 15, :method-params ([inner-monad]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 196, :end-line 196, :max-fixed-arity 1, :fn-var true, :arglists (quote ([inner-monad])), :doc "The Either transformer constructor."}, branch-left {:protocol-inline nil, :meta {:file "/Users/txus/.boot/cache/tmp/Users/txus/Code/Ats/sota_hmi/ui/l3c/-jstf34/js/app.out/cats/monad/either.cljc", :line 236, :column 7, :end-line 236, :end-column 18, :arglists (quote ([e lf])), :doc "Given an either value and a function, if the either is a\n  left, apply the function to the value it contains; if the\n  either is a right, return it."}, :name cats.monad.either/branch-left, :variadic false, :file "/Users/txus/.boot/cache/tmp/Users/txus/Code/Ats/sota_hmi/ui/l3c/-jstf34/js/app.out/cats/monad/either.cljc", :end-column 18, :method-params ([e lf]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 236, :end-line 236, :max-fixed-arity 2, :fn-var true, :arglists (quote ([e lf])), :doc "Given an either value and a function, if the either is a\n  left, apply the function to the value it contains; if the\n  either is a right, return it."}, t_cats$monad$either6307 {:num-fields 3, :protocols #{cats.protocols/MonadTrans cats.protocols/Monad cljs.core/IMeta cats.protocols/Context cljs.core/IWithMeta}, :name cats.monad.either/t_cats$monad$either6307, :file "/Users/txus/.boot/cache/tmp/Users/txus/Code/Ats/sota_hmi/ui/l3c/-jstf34/js/app.out/cats/monad/either.cljc", :type true, :anonymous true, :column 3, :line 199, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, left? {:protocol-inline nil, :meta {:file "/Users/txus/.boot/cache/tmp/Users/txus/Code/Ats/sota_hmi/ui/l3c/-jstf34/js/app.out/cats/monad/either.cljc", :line 120, :column 7, :end-line 120, :end-column 12, :arglists (quote ([v])), :doc "Return true if `v` is an instance\n  of Left type."}, :name cats.monad.either/left?, :variadic false, :file "/Users/txus/.boot/cache/tmp/Users/txus/Code/Ats/sota_hmi/ui/l3c/-jstf34/js/app.out/cats/monad/either.cljc", :end-column 12, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Return true if `v` is an instance\n  of Left type."}, rights {:name cats.monad.either/rights, :file "/Users/txus/.boot/cache/tmp/Users/txus/Code/Ats/sota_hmi/ui/l3c/-jstf34/js/app.out/cats/monad/either.cljc", :line 258, :column 1, :end-line 258, :end-column 12, :meta {:file "/Users/txus/.boot/cache/tmp/Users/txus/Code/Ats/sota_hmi/ui/l3c/-jstf34/js/app.out/cats/monad/either.cljc", :line 258, :column 6, :end-line 258, :end-column 12}, :doc "Given a collection of eithers, return only the values that are left."}, context {:name cats.monad.either/context, :file "/Users/txus/.boot/cache/tmp/Users/txus/Code/Ats/sota_hmi/ui/l3c/-jstf34/js/app.out/cats/monad/either.cljc", :line 144, :column 1, :end-line 145, :end-column 10, :no-doc true, :meta {:file "/Users/txus/.boot/cache/tmp/Users/txus/Code/Ats/sota_hmi/ui/l3c/-jstf34/js/app.out/cats/monad/either.cljc", :line 145, :column 3, :end-line 145, :end-column 10, :no-doc true}}, right {:protocol-inline nil, :meta {:file "/Users/txus/.boot/cache/tmp/Users/txus/Code/Ats/sota_hmi/ui/l3c/-jstf34/js/app.out/cats/monad/either.cljc", :line 115, :column 7, :end-line 115, :end-column 12, :arglists (quote ([] [v])), :doc "A Right type constructor.", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [v]), :arglists ([] [v]), :arglists-meta (nil nil)}}, :name cats.monad.either/right, :variadic false, :file "/Users/txus/.boot/cache/tmp/Users/txus/Code/Ats/sota_hmi/ui/l3c/-jstf34/js/app.out/cats/monad/either.cljc", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [v]), :arglists ([] [v]), :arglists-meta (nil nil)}, :method-params ([] [v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 1, :fn-var true, :arglists ([] [v]), :doc "A Right type constructor."}, lefts {:name cats.monad.either/lefts, :file "/Users/txus/.boot/cache/tmp/Users/txus/Code/Ats/sota_hmi/ui/l3c/-jstf34/js/app.out/cats/monad/either.cljc", :line 254, :column 1, :end-line 254, :end-column 11, :meta {:file "/Users/txus/.boot/cache/tmp/Users/txus/Code/Ats/sota_hmi/ui/l3c/-jstf34/js/app.out/cats/monad/either.cljc", :line 254, :column 6, :end-line 254, :end-column 11}, :doc "Given a collection of eithers, return only the values that are left."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{->Left :private meta6302 cljs.core/IEquiv :protocols :ns :name :file v :end-column inner-monad cats.monad.either/->Left either? :column ->Right meta6308 :positional :factory :line e either-t cats.protocols/Extract :end-line cljs.core/IDeref meta6305 quote :arglists :skip-protocol-flag cats.monad.either/->Right :doc cats.monad.either :test cats.protocols/Contextual}, :order [v cats.monad.either/->Right :protocols :ns :name :file :end-column :column :factory :line :end-line :arglists :skip-protocol-flag :doc :test cljs.core/IEquiv cats.protocols/Extract cljs.core/IDeref cats.protocols/Contextual cats.monad.either ->Right :positional :private cats.monad.either/->Left ->Left meta6302 either-t quote inner-monad meta6305 meta6308 either? e]}, :doc "The Either monad implementation and helper functions\n  for working with either related types.\n\n  Also commonly known as Error monad.\n\n      (require '[cats.monad.either :as either])\n\n      (either/right 1)\n      ;; => #<Right [1]>\n\n      (either/left 1)\n      ;; => #<Left [1]>\n  "}